
// Centered container element
.container {
  margin-right: auto;
  margin-left: auto;
  padding-left:  (@basepx * 1px);
  padding-left:  @margin;
  padding-right: (@basepx * 1px);
  padding-right: @margin;
  &:extend(.clearfix all);
}

// Creates a wrapper for a series of columns
.row {
  margin-left:  (@basepx * -1px);
  margin-left:  @margin-negative;
  margin-right:  (@basepx * -1px);
  margin-right: @margin-negative;
  &:extend(.clearfix all);
}

.column(@width: 1) {
  position: relative;
  float: left;
  width: percentage(@width);
  min-height: 1px;
  padding-left:  (@basepx * 1px);
  padding-left:  @margin;
  padding-right: (@basepx * 1px);
  padding-right: @margin;
}

// generic column float with no width specification
.float {
  position: relative;
  float: left;
  min-height: 1px;
  padding-left:  (@basepx * 1px);
  padding-left:  @margin;
  padding-right: (@basepx * 1px);
  padding-right: @margin;
}

.offset(@decimal) {
  margin-left: percentage(@decimal);
}
.push(@decimal) {
  left: percentage(@decimal);
}
.pull(@decimal) {
  right: percentage(@decimal);
}


// GOLDEN RATIO grid generator - for fluid layouts

.golden-a { .column(@ga); } // larger golden column
.golden-b { .column(@gb); } // smaller golden column


// percentage based columns
// @span - width to span X number of columns
// @cols - based upon X total columns in parent

.percentColumn (@span: 1, @cols: 12)
{
  @colw: (@span / @cols);
  .column(@colw);
}

// EVEN COLUMN GENERATOR 
// generates even width columns to selector
// expects variables to be defined for start and end breakpoints in form:
// @bp-2col, @bp-3col, etc.
// to use specific breakpoint names, the second parameter @t
// will change the expected breakpoint name
// .generate-columns(3, "-widgets");
// would expect variables @bp-widgets-2col, @bp-widgets-3col, etc. to be defined

.even-columns(@n, @t: "", @i: 2) when (@i < @n) {

    @start: (@i);
    @end: (@i + 1);
    @bp-start: "bp@{t}-@{start}col";
    @bp-end: "bp@{t}-@{end}col";

    @media only screen and (min-width: @@bp-start) and (max-width: @@bp-end) {
      .percentColumn(1, @i);
      &:nth-of-type(@{i}n+1) {
          clear: left;
      }
    }

    .even-columns(@n, @t, (@i + 1));
}
.even-columns(@n, @t: "", @i: 2) when (@i = @n) {

    @bp-start: "bp@{t}-@{i}col";

    @media only screen and (min-width: @@bp-start) {
      .percentColumn(1, @i);
      &:nth-of-type(@{i}n+1) {
          clear: left;
      }
    }
   
}
